#!/usr/bin/env groovy

// Jenkins script used to test a set of changelists push by a developer, this script would run every time a developer pushed and would report back to discord the result of the build

package hudson.scm
pipeline 
{
    agent any
	
	environment 
	{
		ProjectName = getFolderName()
		ProjectClientName = "jenkins-${NODE_NAME}_${JOB_NAME}"
        
        Build_Version = ""
        
        // Set our global variables
		ENGINE_DIR = "${env.ENGINE_RELEASE_DIR}"
		ENGINE_UAT = "${ENGINE_DIR}${env.ENGINE_UAT}"
	}

    stages 
	{
	    stage('Sync')
	    {
	        steps
	        {
	            parallel(
	                "Sync Engine": 
	                {
                        checkout perforce(credential: '', 
                        populate: syncOnly(force: false, have: true, modtime: false, parallel: [enable: true, minbytes: '1024', minfiles: '1', threads: '4'], pin: '', quiet: true, revert: false), 
                        workspace: staticSpec(charset: 'utf8', clone: false, name: 'jenkins-master-EngineRelease', pinHost: true))
	                },
	                "Sync Project": 
	                {
                        checkout perforce(credential: '', 
                        populate: syncOnly(force: false, have: true, modtime: false, parallel: [enable: false, minbytes: '1024', minfiles: '1', threads: '4'], pin: '', quiet: true, revert: false), 
                        workspace: manualSpec(charset: 'utf8', name: "${ProjectClientName}", pinHost: true, 
                        spec: clientSpec(allwrite: false, backup: false, clobber: true, compress: false, line: 'LOCAL', locked: false, modtime: false, rmdir: true, serverID: '', streamName: '', type: 'READONLY', 
                        view: "//${ProjectName}/${JOB_BASE_NAME}/${ProjectName}/... //${ProjectClientName}/${ProjectName}/...")))
                    }
	            )
	        }
	        post
	        {
	            success
	            {
	                // We run as script here so we can set a variable inside a "step"
                    script
                    {
                        Build_Version = VersionNumber(projectStartDate: '2016-01-01', versionNumberString: "${JOB_BASE_NAME}_${P4_CHANGELIST}")
                    }
	            }
	        }
	    }
		// Build Win64 builds both Editor and Shipping
		stage('Compile Win64') 
		{
            steps 
			{
                bat """\"%ENGINE_UAT%\" BuildGraph -Script=\"%ENGINE_DIR%/Engine/Build/Graph/Custom/BuildProject.xml\" -target="Compile ${ProjectName} Win64" -set:ProjectName=\"${ProjectName}\" -set:Version=\"${Build_Version}\" -set:ProjectDir=\"%WORKSPACE%/${ProjectName}/\" -set:BuildConfig=Shipping"""
            }
        }
        stage('Cook Project') 
		{
            steps 
			{
                bat """\"%ENGINE_UAT%\" BuildGraph -Script=\"%ENGINE_DIR%/Engine/Build/Graph/Custom/BuildProject.xml\" -target=\"Cook Project\" -set:ProjectName=\"${ProjectName}\" -set:ProjectDir=\"%WORKSPACE%/${ProjectName}/\""""
            }
        }
		stage('Compile Linux Shipping') 
		{
            steps 
			{
                bat """\"%ENGINE_UAT%\" BuildGraph -Script=\"%ENGINE_DIR%/Engine/Build/Graph/Custom/BuildProject.xml\" -target="Compile ${ProjectName} Linux" -set:ProjectName=\"${ProjectName}\" -set:Version=\"${Build_Version}\" -set:ProjectDir=\"%WORKSPACE%/${ProjectName}/\" -set:BuildConfig=Shipping"""
            }
        }
    }
    post 
    {
        always
        {
			// Push to Discord
        }
    }
}

def getFolderName() 
{
    return "${env.JOB_NAME}".split('/')[0]
}